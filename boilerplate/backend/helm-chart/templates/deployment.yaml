apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.ncc.instance }}-{{ .Values.ncc.installation }}
spec:
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      annotations:
        prometheus.io/container.scrape: "true"
        prometheus.io/container.path: /metrics
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      securityContext:
        fsGroup: 1001
      containers:
        - name: nginx
          image: "{{ .Values.image.nginx.name }}:{{ .Values.image.nginx.tag }}"
          resources: 
            limits: 
              cpu: "1000m"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 80
              name: http-metrics
          volumeMounts:
            - name: nginx-conf-volume
              mountPath: /home1/irteam/apps/nginx/conf/nginx.conf
              subPath: nginx.conf
              readOnly: true
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "15"]
        - name: nginx-prometheus-exporter
          image: {{ .Values.image.nginx_prometheus_exporter.name }}:{{ .Values.image.nginx_prometheus_exporter.tag }}
          resources: 
            limits: 
              cpu: "1000m"
          args:
            - -nginx.scrape-uri=http://localhost:80/basic_status
          ports:
            - containerPort: 9113
              name: nginx-metrics
        - name: nodejs
          image: {{ .Values.image.app.name }}:{{ .Values.image.app.tag }}
          resources: 
            limits: 
              cpu: "2000m"
          imagePullPolicy: IfNotPresent
          env:
            {{- range $key, $value := .Values.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
            {{- end }}
            - name: "PORT"
              value: "8080"
          ports:
            - containerPort: 8080
              name: app-metrics
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "15"]
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /v1
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: nginx-conf-volume
          configMap:
            name: {{ .Values.ncc.instance }}-{{ .Values.ncc.installation }}
